Predictions shape: torch.Size([1])
Targets shape: torch.Size([16, 1])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-430-9e7cc2b21c01> in <cell line: 2>()
      2 for epoch in range(epochs):
      3     # Train the model using the train_model function
----> 4     train_model(model, train_loader, optimizer, focal_loss)  # Train with focal loss
      5 
      6     # Validate the model

2 frames
<ipython-input-428-793647f821d3> in train_model(model, train_loader, optimizer, loss_fn)
     18 
     19         # Compute the loss (predictions and targets should both be of the same shape)
---> 20         loss = loss_fn(predictions, targets)
     21 
     22         # Zero gradients, backpropagate, and optimize

<ipython-input-389-5656b701ab9a> in focal_loss(predictions, targets, alpha, gamma)
      2 def focal_loss(predictions, targets, alpha=0.25, gamma=2.0):
      3     # Compute binary cross-entropy loss for each sample
----> 4     bce_loss = F.binary_cross_entropy_with_logits(predictions, targets, reduction='none')
      5 
      6     # Calculate p_t, which is the probability assigned to the true class

/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py in binary_cross_entropy_with_logits(input, target, weight, size_average, reduce, reduction, pos_weight)
   3240 
   3241     if not (target.size() == input.size()):
-> 3242         raise ValueError(f"Target size ({target.size()}) must be the same as input size ({input.size()})")
   3243 
   3244     return torch.binary_cross_entropy_with_logits(input, target, weight, pos_weight, reduction_enum)

ValueError: Target size (torch.Size([16, 1])) must be the same as input size (torch.Size([1]))
